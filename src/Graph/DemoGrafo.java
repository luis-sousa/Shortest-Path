/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DemoGrafo.java
 *
 * Created on 28/Jan/2013, 13:18:09
 */
package Graph;

import Exceptions.EmptyCollectionException;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

/**
 *
 * @author luis
 */
public class DemoGrafo extends javax.swing.JFrame {

    private Network<String> mygraph;

    /** Creates new form DemoGrafo */
    public DemoGrafo() {
        initComponents();
        mygraph = new Network<String>();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        rbMaisCurto = new javax.swing.JRadioButton();
        rbHoraNormal = new javax.swing.JRadioButton();
        rbHoraPonta = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldDestino = new javax.swing.JTextField();
        jTextFieldOrigem = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Origem");

        jLabel2.setText("Destino");

        jButton1.setText("Escolher Mapa");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        rbMaisCurto.setText("Mais Curto");

        rbHoraNormal.setText("Mais rápido Hora Normal");
        rbHoraNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHoraNormalActionPerformed(evt);
            }
        });

        rbHoraPonta.setText("Mais rápido Hora Ponta");
        rbHoraPonta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHoraPontaActionPerformed(evt);
            }
        });

        jButton2.setText("Calcular");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Caminho:");

        jLabel3.setText("Qualidade");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "1", "2", "3", "4", "5" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap(574, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbMaisCurto)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(38, 38, 38)
                                        .addComponent(jTextFieldDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(rbHoraNormal, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGap(53, 53, 53)
                        .addComponent(rbHoraPonta)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 383, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbMaisCurto)
                    .addComponent(rbHoraPonta)
                    .addComponent(rbHoraNormal))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jButton1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser jfc = new JFileChooser();
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();

            //Create a workbook object from the file at specified location.
            //Change the path of the file as per the location on your computer.
            Workbook wrk1 = null;
            try {
                wrk1 = Workbook.getWorkbook(new File(file.getPath()));
            } catch (IOException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BiffException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }

            //Obtain the reference to the first sheet in the workbook
            Sheet sheet1 = wrk1.getSheet(0);

            //ler do excel e adicionar vertices e adicionalos nas 2 combos box
            for (int i = 0; i < sheet1.getRows(); i++) {
                for (int j = 0; j < 2; j++) {
                    mygraph.addVertex(sheet1.getCell(j, i).getContents());
                }
            }

            //ler do excel adicionar arestas
            for (int i = 0; i < sheet1.getRows(); i++) {
                for (int j = 0; j < 6; j++) {
                    mygraph.addEdge(sheet1.getCell(j, i).getContents(), sheet1.getCell(j = j + 1, i).getContents(), new Weight(Double.valueOf(sheet1.getCell(j = j + 1, i).getContents()), Integer.parseInt(sheet1.getCell(j = j + 1, i).getContents()), Integer.parseInt(sheet1.getCell(j = j + 1, i).getContents()), Integer.parseInt(sheet1.getCell(j = j + 1, i).getContents()), Integer.parseInt(sheet1.getCell(2, i).getContents())));
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void rbHoraPontaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbHoraPontaActionPerformed
        boolean select = rbHoraPonta.isSelected();
        if (select == true) {
            rbHoraNormal.setEnabled(false);
        } else {
            rbHoraNormal.setEnabled(true);
        }
    }//GEN-LAST:event_rbHoraPontaActionPerformed

    private void rbHoraNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbHoraNormalActionPerformed
        boolean select = rbHoraNormal.isSelected();
        if (select == true) {
            rbHoraPonta.setEnabled(false);
        } else {
            rbHoraPonta.setEnabled(true);
        }
    }//GEN-LAST:event_rbHoraNormalActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (rbMaisCurto.isSelected()) {
            mygraph.shortestDistance(); //Metodo caminho mais curto

            Iterator<String> it = null;
            String str = "";
            try {
                it = mygraph.iteratorShortestPath(jTextFieldOrigem.getText(), jTextFieldDestino.getText());
            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }

            while (it.hasNext()) {
                if (it.hasNext()) {
                    str = str + it.next() + " - ";
                }
            }
            try {
                str = str + mygraph.shortestPathWeight(jTextFieldOrigem.getText(), jTextFieldDestino.getText());

            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel4.setText(str + " Metros");

        }

        //Mais Curto com Qualidade
        if (rbMaisCurto.isSelected() && jComboBox1.getSelectedIndex() != 0) {
            Iterator<String> it2 = null;
            String str2 = "";
            mygraph.shortestDistanceQuality(jComboBox1.getSelectedIndex());
            try {
                it2 = mygraph.iteratorShortestPath(jTextFieldOrigem.getText(), jTextFieldDestino.getText());
            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (it2.hasNext()) {
                if (it2.hasNext()) {
                    str2 = str2 + it2.next() + " - ";
                }
            }
            try {
                str2 = str2 + mygraph.shortestPathWeight(jTextFieldOrigem.getText(), jTextFieldDestino.getText());

            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel4.setText(str2 + " Metros");
        }

        //Mais Rápido em Hora de Ponta
        if (rbHoraPonta.isSelected()) {
            Iterator<String> it3 = null;
            String str3 = "";
            mygraph.peakHourFastPath();

            try {
                it3 = mygraph.iteratorShortestPath(jTextFieldOrigem.getText(), jTextFieldDestino.getText());
            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (it3.hasNext()) {
                if (it3.hasNext()) {
                    str3 = str3 + it3.next() + " - ";
                }
            }
            try {
                str3 = str3 + mygraph.shortestPathWeight(jTextFieldOrigem.getText(), jTextFieldDestino.getText());

            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel4.setText(str3 + " Minutos");
        }


        //Mais rapido em Hora Normal
        if (rbHoraNormal.isSelected()) {
            Iterator<String> it4 = null;
            String str4 = "";
            mygraph.normalHourFastPath();

            try {
                it4 = mygraph.iteratorShortestPath(jTextFieldOrigem.getText(), jTextFieldDestino.getText());
            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (it4.hasNext()) {
                if (it4.hasNext()) {
                    str4 = str4 + it4.next() + " - ";
                }
            }
            try {
                str4 = str4 + mygraph.shortestPathWeight(jTextFieldOrigem.getText(), jTextFieldDestino.getText());

            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel4.setText(str4 + " Minutos");

        }

        //Mais rapido em Hora de Ponta com Qualidade
        if (rbHoraPonta.isSelected() && jComboBox1.getSelectedIndex() != 0) {
            Iterator<String> it5 = null;
            String str5 = "";
            mygraph.peakHourFastQualityPath(jComboBox1.getSelectedIndex());

            try {
                it5 = mygraph.iteratorShortestPath(jTextFieldOrigem.getText(), jTextFieldDestino.getText());
            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (it5.hasNext()) {
                if (it5.hasNext()) {
                    str5 = str5 + it5.next() + " - ";
                }
            }
            try {
                str5 = str5 + mygraph.shortestPathWeight(jTextFieldOrigem.getText(), jTextFieldDestino.getText());

            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel4.setText(str5 + " Minutos");
        }


        //Mais rapido em Hora Normal com qualidade
        if (rbHoraNormal.isSelected() && jComboBox1.getSelectedIndex() != 0) {
            Iterator<String> it6 = null;
            String str6 = "";
            mygraph.normalHourFastQualityPath(jComboBox1.getSelectedIndex());

            try {
                it6 = mygraph.iteratorShortestPath(jTextFieldOrigem.getText(), jTextFieldDestino.getText());
            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (it6.hasNext()) {
                if (it6.hasNext()) {
                    str6 = str6 + it6.next() + " - ";
                }
            }
            try {
                str6 = str6 + mygraph.shortestPathWeight(jTextFieldOrigem.getText(), jTextFieldDestino.getText());

            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel4.setText(str6 + " Minutos");
        }

        //Mais curto e mais rapido em Hora de Ponta
        if (rbMaisCurto.isSelected() && rbHoraPonta.isSelected()) {
            Iterator<String> it7 = null;
            String str7 = "";
            mygraph.peakHourShortestFastPath();

            try {
                it7 = mygraph.iteratorShortestPath(jTextFieldOrigem.getText(), jTextFieldDestino.getText());
            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (it7.hasNext()) {
                if (it7.hasNext()) {
                    str7 = str7 + it7.next() + " - ";
                }
            }
            try {
                str7 = str7 + mygraph.shortestPathWeight(jTextFieldOrigem.getText(), jTextFieldDestino.getText());

            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel4.setText(str7 + "Peso");
        }



        //Mais curto e mais rapido em Hora Normal
        if (rbMaisCurto.isSelected() && rbHoraNormal.isSelected()) {
            Iterator<String> it8 = null;
            String str8 = "";
            mygraph.normalHourShortestFastPath();

            try {
                it8 = mygraph.iteratorShortestPath(jTextFieldOrigem.getText(), jTextFieldDestino.getText());
            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (it8.hasNext()) {
                if (it8.hasNext()) {
                    str8 = str8 + it8.next() + " - ";
                }
            }
            try {
                str8 = str8 + mygraph.shortestPathWeight(jTextFieldOrigem.getText(), jTextFieldDestino.getText());

            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel4.setText(str8 + " Peso");
        }

        //Mais Curto Mais Rapido em Hora de Ponta com Qualidade
        if (rbHoraPonta.isSelected() && rbMaisCurto.isSelected()
                && jComboBox1.getSelectedIndex() != 0) {
            Iterator<String> it9 = null;
            String str9 = "";
            mygraph.peakHourShortestFastQualityPath(jComboBox1.getSelectedIndex());

            try {
                it9 = mygraph.iteratorShortestPath(jTextFieldOrigem.getText(), jTextFieldDestino.getText());
            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (it9.hasNext()) {
                if (it9.hasNext()) {
                    str9 = str9 + it9.next() + " - ";
                }
            }
            try {
                str9 = str9 + mygraph.shortestPathWeight(jTextFieldOrigem.getText(), jTextFieldDestino.getText());

            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel4.setText(str9  + "Peso");
        }

        //Mais Curto Mais Rapido em Hora Normal com Qualidade
        if (rbHoraNormal.isSelected() && rbMaisCurto.isSelected()
                && jComboBox1.getSelectedIndex() != 0) {
            Iterator<String> it10 = null;
            String str10 = "";
            mygraph.normalHourShortestFastQualityPath(jComboBox1.getSelectedIndex());

            try {
                it10 = mygraph.iteratorShortestPath(jTextFieldOrigem.getText(), jTextFieldDestino.getText());

            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            while (it10.hasNext()) {
                if (it10.hasNext()) {
                    str10 = str10 + it10.next() + " - ";
                }
            }
            try {
                str10 = str10 + mygraph.shortestPathWeight(jTextFieldOrigem.getText(), jTextFieldDestino.getText());

            } catch (EmptyCollectionException ex) {
                Logger.getLogger(DemoGrafo.class.getName()).log(Level.SEVERE, null, ex);
            }
            jLabel4.setText(str10  + " Peso");
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;






                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DemoGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DemoGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DemoGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DemoGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new DemoGrafo().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextFieldDestino;
    private javax.swing.JTextField jTextFieldOrigem;
    private javax.swing.JRadioButton rbHoraNormal;
    private javax.swing.JRadioButton rbHoraPonta;
    private javax.swing.JRadioButton rbMaisCurto;
    // End of variables declaration//GEN-END:variables
}
